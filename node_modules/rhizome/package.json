{
  "_args": [
    [
      {
        "raw": "rhizome",
        "scope": null,
        "escapedName": "rhizome",
        "name": "rhizome",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/tatecarson/Documents/Supercollider/_OrgExamples/MyComps/Interactive Evolutionary Algorithm/IEA_Rhizome"
    ]
  ],
  "_from": "rhizome@latest",
  "_id": "rhizome@0.3.0",
  "_inCache": true,
  "_location": "/rhizome",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rhizome",
    "scope": null,
    "escapedName": "rhizome",
    "name": "rhizome",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/rhizome/-/rhizome-0.3.0.tgz",
  "_shasum": "bbcfff9a1b900276706425bbfb4c0c2f3c089184",
  "_shrinkwrap": null,
  "_spec": "rhizome",
  "_where": "/Users/tatecarson/Documents/Supercollider/_OrgExamples/MyComps/Interactive Evolutionary Algorithm/IEA_Rhizome",
  "author": {
    "name": "Ben Williamson",
    "email": "benw@pobox.com"
  },
  "bugs": {
    "url": "https://github.com/benw/rhizome/issues"
  },
  "dependencies": {
    "pegjs": "0.7.x"
  },
  "description": "Use a peg.js grammar to route url requests",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "bbcfff9a1b900276706425bbfb4c0c2f3c089184",
    "tarball": "https://registry.npmjs.org/rhizome/-/rhizome-0.3.0.tgz"
  },
  "homepage": "https://github.com/benw/rhizome#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "benw",
      "email": "benw@pobox.com"
    }
  ],
  "name": "rhizome",
  "optionalDependencies": {},
  "readme": "# Rhizome\n\nA connect/express middleware for dispatching requests to a\nhierarchy of resources, using a grammar to describe the\nstructure of the url hierarchy.\n\nIf you're interested in using this, please bug me to finish this doco.\n\nSynopsis:\n\n    var rhizome = require('rhizome');\n    var resources = require('./resources');\n    var grammar = 'a valid peg.js grammar';\n\n    var parser = rhizome.pegjs.buildParser(grammar);\n\n    app.use(rhizome({\n      parser: parser,\n      resources: resources\n    }));\n\nYou construct a pegjs parser from the given grammar.\nThen for each request passed to this middleware, the parser\nis given req.url as input, and the resulting parse tree is\ntraversed to resolve the request to a resource. See also the\ncomments for rhizome.resolve, below.\n\nconfig fields:\n\n* `parser` A pegjs (or compatible) parser object, having `parser.parse(input, [startRule])`. Required.\n\n* `resources` An object holding resource constructors. Required.\n\n* `makeinput` Function to extract from a request the input to be parsed. Defaults to `rhizome.makeinput`\n\n* `startRule` The name of the start rule in the grammar. Defaults to the first declared rule.\n\n* `parse` Function to parse a request into a parse tree. Defaults to `rhizome.parse`.\n\n* `dispatch` Function to dispatch a request against a resource. Defaults to `rhizome.dispatch`.\n\n* `debug` True to log parse errors. Defaults to false.\n\n",
  "repository": {
    "type": "git",
    "url": "git://github.com/benw/rhizome.git"
  },
  "scripts": {
    "test": "node_modules/mocha/bin/mocha"
  },
  "version": "0.3.0"
}
